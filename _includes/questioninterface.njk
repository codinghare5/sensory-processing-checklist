

{% set questionOptions = [ {"label": "Was True", "id": "was-true", "value": 2},
                          {"label": "True Now", "id": "true-now", "value": 3},
                          {"label": "Not Sure", "id": "not-sure", "value": 1},
                          {"label": "False", "id": "false", "value": 0}] %}

<!-- set macros to return the text -->
{% macro get_text(item, locat) %}
  {% if locat === "sense" %}
    {% set text = item.sense %}
  {% elseif locat === "metacategory" %}
    {% set text = item.name %}
  {% else%}
    {% set text = item.category %}
  {% endif %}

  {{ text }}
{% endmacro%}

{% macro print_sidebar_items(topidpart, sidearray) %}
  {% for item in sidearray %}
    {% if struct.side == "category" %}
      {% set sideindex = item.index %}
    {% else %}
      {% set sideindex = loop.index %}
    {% endif %}
    <div class="accordion-item ">
      <h2 class="accordion-header" id="heading-{{ topidpart }}-{{ sideindex }}">
        <button class="accordion-button collapsed" 
              type="button" 
              data-bs-toggle="collapse" 
              data-bs-target="#collapse-{{ topidpart }}-{{ sideindex }}" 
              aria-expanded="false" 
              aria-controls="collapse-{{ topidpart }}-{{ sideindex }}">
          {{ get_text(item,struct.side)}}
        </button>
      </h2>
    </div>
  {% endfor %}
{% endmacro %}


{% macro print_body(topidpart, sidearray) %}
  {% for sideitem in sidearray %}
    {% if struct.side === "category" %}
        {% set sideindex = sideitem.index %}
        {% set bodyarray = sideitem.senses %}
      {% else %}
        {% set sideindex = loop.index %}
        {% set bodyarray = sideitem.categories %}
    {% endif %}

    {# <p style="margin-left: 10px;">Meta name: {{ meta.name | lower }}</p> #}
    {# this whole part collapses on sidebar button/parent click #}
    {# id= data-bs-target/aria-controls of the sidebar buttons #}
    <div id="collapse-{{ topidpart }}-{{ sideindex }}" 
            class="accordion-collapse collapse col-sm-9" 
            aria-labelledby="bodyAccorcionHeading"
            {# points out to id of the accordion parent from the sidebar #}
            data-bs-parent="#accordionExample-{{ topidpart }}">
      {# accordion wrapper for categories #}
      <div class="accordion-body">
        {# 1. we are inside metacategories loop -> id= sense-loop.index #}
        {#    and this is enought for the accordion below to be unique #}
        {#    see No 2. for more details #}
        <div class="accordion" id="{{ topidpart }}-{{ sideindex }}">
          {# 2. we need to pass loop.index one layer down #}
          {#    for accordion's children to function properly #}
          {#    so let's set new variable #}
          {#    see No 3. for more details #}
          {% call print_categories(topidpart, bodyarray, sideindex) %}
          {% endcall %}
        </div>
      </div>
    </div>
  {% endfor %}
{% endmacro %}


{% macro print_categories(topidpart, bodyarray, sideindex) %}
  {% for bodyitem in bodyarray %}
    {% if struct.body === "category" %}
        {% set bodyindex = bodyitem.index %}
      {% else %}
        {% set bodyindex = loop.index %}
    {% endif %}
    <div class="accordion-item">
      <h2 class="accordion-header" id="heading-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}">
        <button class="accordion-button collapsed" 
              type="button" 
              data-bs-toggle="collapse" 
              data-bs-target="#body-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}" 
              aria-expanded="false" 
              aria-controls="body-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}">
          {{ get_text(bodyitem,struct.body) }}
        </button>
      </h2>
      <div id="body-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}" 
            class="accordion-collapse collapse" 
            aria-labelledby="headingOne"
              {# 3. set the parent with the correct id from the outer loop #}
              {#     eg. vision-4 #}
              {#     senses are unique and metacategory number is enought for the accordion to work #}
            data-bs-parent="#{{ topidpart }}-{{ sideindex }}">
        {# START print out questions #}
        {% if struct.top === "sense"%}
          {% set senseid = topidpart %}
          {% set catindex = bodyindex %}
        {% else %} {# struct.top === metacategory #}
          {% set senseid = bodyindex %}
          {% set catindex = sideindex %}
        {% endif %}
        {% call print_questions(senseid, bodyitem.questions, catindex) %}
        {% endcall %}
        {# END print out questions #}
      </div>
    </div>
  {% endfor %}
{% endmacro %}


{% macro print_questions(senseid, questionarray, catindex) %}
  {% for question in questionarray %}
    {% set questionName = senseid + '-' + catindex + '-' + loop.index %}
    <div class="accordion-body" id="{{ questionName}}" value="0">
      {{ question }}
      {# use class=row to spread radio inputs #}
      <div class="row row-cols-auto justify-content-center">
        {% for opt in  questionOptions %}
          <div class="form-check form-check-inline col border border-1">
            <input class="form-check-input" type="checkbox" 
              name="{{ questionName }}-{{ opt.id }}" 
              id="{{ questionName }}-{{opt.id}}" 
              value="{{ opt.value }}"{% if opt.id == "false" %} checked="checked"{% endif %}>
            <label class="form-check-label" for="{{ questionName }}-{{ opt.id }}">{{ opt.label }}</label>
            {# {{ opt.label }} #}
          </div>
        {% endfor %}
      </div> <!-- end row -->
    </div> <!-- end accordion body -->
  {% endfor %}
{% endmacro %}

{% macro print_tab_content(data) %}
  {% for topitem in data %}

    {% if struct.top === "sense" %}
      {% set idpart = topitem.sense | lower %}
      {% set sidearray = topitem.metacategories %}
    {% else %}
      {%set idpart = "metacategory" + loop.index %}
      {% set sidearray = topitem.categories %}
    {% endif %}
    
    {# START the tab's contents #}
    <div class="tab-pane fade{% if loop.first %} show active{% endif %}" 
            id="nav-{{ idpart }}" 
            role="tabpanel" 
            aria-labelledby="nav-{{ idpart }}-tab">
      {# very important - it is the unique id of the parent #}
      {# START main accordion, as a row #}
      <div class="accordion row" id="accordionExample-{{ idpart }}">
        {% set outerLoop = loop %}
        {# START items in the sidebar, left column, responsive #}
        <div class="col-sm-3">
          {% call print_sidebar_items(idpart, sidearray) %}
          {% endcall %}
        </div>
        {# END items in sidebar #}

        {# this is the body inside accordion, the right colun, responsive #}
        <div class="col-sm-9">
          {% call print_body(idpart, sidearray) %}
          {% endcall %}
        </div>
        {# END this is the body inside accordion #}
      </div>
      {# END main accordion #}
    </div>
    {# END the tab's contents #}
  {% endfor %}
    <div class="col-12">
      <button class="btn btn-primary" type="submit">Submit form</button>
    </div>
{% endmacro %}


{%- macro create_id(sense) -%}
{%- set items = ["nav-", sense, "-tab"] -%}
{{ caller() }}{{ items | lower | join("") }}
{%- endmacro -%}


{% macro string_join_dash(string) %}
  {# 1.a find forward slash #}
  {% set re = r/\//g %}
  {# 2.a leave letters and whitespace (there is a space after Z to leave whitespace) #}
  {% set re2 = r/[^a-zA-Z ]+/g %}
  {# 1.b to replace it with whitespace #}
  {% set newstr = string.replace(re, ' ') %}
  {# 2.b. and replace everything else with an empty string #}
  {% set newstr = newstr.replace(re2, '') %}
  {% set words = newstr | lower %}
  {# make a list from a string, there are only words and whitespace left #}
  {% set words_list = words.split(" ") %}
  {% set words_dash = words_list.join("-") %}
  {{ words_dash }}
{% endmacro %}


{% macro string_to_array(string) %}
  {# 1.a find forward slash #}
  {% set re = r/\//g %}
  {# 2.a leave letters and whitespace (there is a space after Z to leave whitespace) #}
  {% set re2 = r/[^a-zA-Z ]+/g %}
  {# 1.b to replace it with whitespace #}
  {% set newstr = string.replace(re, ' ') %}
  {# 2.b. and replace everything else with an empty string #}
  {% set newstr = newstr.replace(re2, '') %}
  {% set words = newstr | lower %}
  {# make a list from a string, there are only words and whitespace left #}
  {% set words_list = words.split(" ") %}
  {# {% set words_dash = words_list.join("-") %} #}
  {{ words_list }}
{% endmacro %}


{# START navigation between tabs #}
<nav>
  <div class="nav nav-tabs" id="nav-tab" role="tablist">
    {% for topitem in data %}
      {% if struct.top === "sense" %}
        {% set idpart = topitem.sense | lower %}
      {% else %}
        {% set idpart = "metacategory" + loop.index %}
      {% endif %}
        <button 
            class="nav-link{% if loop.first %} active{% endif %}" 
            id="nav-{{ idpart }}-tab" 
            data-bs-toggle="tab" 
            data-bs-target="#nav-{{ idpart }}" 
            type="button" 
            role="tab" 
            aria-controls="nav-{{ idpart }}" 
            aria-selected="{% if loop.first %}true{% else %}false{% endif %}">
              {{ get_text(topitem, struct.top) }}
        </button>
    {% endfor %}
  </div>
</nav>
{# END navigation between tabs #}

{# START of the tab, main container #}
{# this part should occure only once, so it is outside of the loop #}
<form class="form">
  <div class="tab-content" id="nav-tabContent" style="margin-top: 42px;">
    {% call print_tab_content(data) %}
    {% endcall %}
  </div>
<form>
{# END of the tab #}


<script>
  document.querySelector('form.form').addEventListener('submit', function(e) {
    e.preventDefault();
    let x = document.querySelector('form.form').elements;
    console.log(x);
  });

  // grab all the buttons with class 'questionButton'
  const questionButtons = document.querySelectorAll(".form-check-input")
  console.log('there are ' + questionButtons.length + ' question buttons')

  // loop through buttons setting an event listener
  for (i=0 ; i<questionButtons.length ; i++) {
    questionButtons[i].addEventListener('change', function() {
      console.log(this.getAttribute("id"));
      
      const formwrapper = this.parentElement.parentElement.parentElement;
      var currentvalue = formwrapper.getAttribute("value");
      const thisvalue = this.getAttribute("value");
      const buttons = formwrapper.getElementsByTagName("input");
      const falsebutton = buttons[3];
      const notsurebutton = buttons[2]
      const truebutton = buttons[1];
      const wastruebutton = buttons[0];
      //console.log(buttons);
      
      var newvalue;
      if (!this.checked) {
        console.log(this.checked);
        if (this == falsebutton) { // if false button do nothing else
          falsebutton.checked=true;
        } else {
          //this.removeAttribute('checked');
          newvalue = +currentvalue - +thisvalue; //+thisvalue converts thisvalue to an int
          if (newvalue == 0){ // no buttons are active
            falsebutton.checked=true;
            formwrapper.setAttribute("value",0);
          }
          else { // one other button is active (can't be more than one)
            formwrapper.setAttribute("value",newvalue);
          }
        } 
      }
      else { // the button was not active
        console.log(this.checked);
        if (this === falsebutton) {
          console.log("It is false button.");
          formwrapper.setAttribute("value",0);
          for (j=0; j<buttons.length - 1 ; j++)
            buttons[j].checked=false;
        }
        else {
          console.log("It is NOT false button.");
          falsebutton.checked=false;
          if (this === notsurebutton) {
            console.log("It is not-sure button.");
            truebutton.checked=false;
            wastruebutton.checked=false;
            formwrapper.setAttribute("value",1);
          }
          else { // button is either wastruebutton or nowtruebutton
            console.log("First two buttons.");
            if (notsurebutton.checked){
              console.log("It is not-sure button.");
              notsurebutton.checked=false;
              falsebutton.checked=false;
              currentvalue = 0;
            }
            newvalue = +currentvalue + +thisvalue;
            console.log('currentvalue: ' + currentvalue + ' thisvalue: ' + thisvalue + ' newvalue: ' + newvalue);
            formwrapper.setAttribute("value",newvalue)
          }
        }
        //this.setAttribute("checked", "checked");
      } 
      console.log('form value:' + formwrapper.getAttribute("value"));
    }); // end function definition
  } // end loop through buttons

  console.log('added event listeners')
</script>


{# Main loop, good for testing the json file
{% for sense in questions %}
  {% for meta in sense.metacategories %}
  <p style="margin-left: 50px;">Meta name: {{ meta.name | lower }}</p>
    {% for item in meta.categories %}
    <p style="margin-left: 100px;">Cat: {{ item.category | lower }}</p>
      {% for question in item.questions %}
      <p style="margin-left: 150px;">Q: {{ question }}</p>
      {% endfor %}
    {% endfor %}
  {% endfor %}
{% endfor %} 
#}
