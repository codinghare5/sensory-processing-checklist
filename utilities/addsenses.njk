---
layout: layouts/base.njk
title: Add Senses
eleventyNavigation:
  key: Add Senses
  parent: Utilities
  order: 1
---
{#=================================    LAYOUT   ==================================#}
{#================================================================================#}
<section class="container-xl p-4">
    <h1 class="text-center pb-2"> Add and Edit Questions</h1>

    <!-- Text box to enter the name of the new sense -->
    <div class="d-inline-flex">
        <label class="fs-3" for="choosesense">
            Name of Sense to Edit:
        </label>
        <select id="choosesense" class="fs-3 p-1 ps-2 ms-1">
            {% for sense in categoryquestions[0].senses %}
                <option value="{{ sense.sense | lower}}">
                    {{ sense.sense }}
                </option>
            {% endfor %}
        </select>
    </div>
    <div class="d-inline-flex mt-3">
        <label class="fs-3" for="addsenseinput">
            Name of Sense to Add: 
        </label>
        <input type="text" id="addsenseinput" rows=12 class="w-auto fs-3 ms-2">
        <button class="p-2 ms-5 bg-info rounded" id="savebutton" type="button">Add Sense</button>
    </div>
</section>

<!-- Context menu ---------------------------------------------------------------------------- -->
{# context menu #}
<section class="container-xl card mb-2">
    <nav class="d-flex justify-content-around py-4">
        <button class="p-2 bg-info rounded" id="savebutton" type="button">Save JSON File</button>
        {# button to save question answers #}
        <button class="p-2 bg-info rounded" id="readbutton" type="button">Read JSON File</button>
        {# button to show results #}
        <button class="p-2 bg-info rounded" id="resultsbutton" type="button">View JSON</button>
    </nav>
</section>

{# wrap everything into a card class #}
<div class='container-xl card py-2 mb-4'>
    
<!-- Progress bar ---------------------------------------------------------------------------- -->
{# create progress bar #}
<section class="container-xl py-3 px-4" id="progress-grid">
    <div class="row bg-white">
        {% for metacat in meta %}
            {% for category in metacat.categories %}
                {% set catindex = category.index %}
        
                <div class="col p-0 progress-column" style="border: 2px solid LightGray" 
                            catindex="{{ catindex - 1 }}">
                    {% for sense in category.senses %}
                    <div class="progress-item" 
                        style="width: auto; height:20px; border: 1px solid; border-color: LightGray;"
                        senseindex="{{ loop.index - 1 }}">
                    </div>
                    {% endfor %}
                </div>

            {% endfor %}
        {% endfor %}
    </div>
</section>

{# Create Category name placeholder #}
<h2 class="p-3" id="category-name"> 
    {{ categoryquestions[0].category }} for {{ questions[0].sense}}
</h2>

<section class="container-xl py-3 px-4" id="input-section">
    <!-- Text area to input the questions -->
    <label for="question-textarea">
        Add or edit questions for category here
    </label>
    <textarea id="questions-textarea" rows=12 class="w-100"></textarea>

    {# next and previous buttons #}
    <div>
        <nav class="d-flex justify-content-between py-2"> {#  category nav buttons #}
            <button class="p-2 bg-info rounded" id="previous-category-button" type="button" nextevent="previous">Previous Category</button>
            <button class="p-2 bg-info rounded" id="next-category-button" type="button" nextevent="next">Next Category</button>
        </nav>
        <nav class="d-flex justify-content-between py-3 pt-0"> {# sense nav buttons#}
            <button class="p-2 bg-info rounded" id="previous-sense-button" type="button" nextevent="previous">Previous Sense</button>
            <button class="p-2 bg-info rounded" id="next-sense-button" type="button" nextevent="next">Next Sense</button>
            </div>
        </nav>
    </div>
</section>
</div> {# end card #}

<section class="container-xl py-3 px-4" id="view-area">
    <p>view of json goes here</p>
</section>

{#===============================   END LAYOUT   ==================================#}
{#================================================================================#}


{#============================== START DATA CONTAINERS ==============================#}
{#================================================================================#}

{# Create header for category names  #}
{# Creating them together inside a <div> with an id makes them easy to extract in javascript #}
<div id="category-container" style="display:none"> 
    {% for cat in categoryquestions %}
        <h2 catindex="{{ cat.index }}"> {{ cat.category }}</h2>
    {% endfor %}
</div>

<div class="container-xl pt-5" id="questionset-container" style="display:none">
    {% for category in categoryquestions %}
        {% set catindex = category.index %}
        <div class="category-questionset" catindex="{{catindex - 1 }}">
            {% for sense in category.senses %} 
                {% set senseindex = loop.index %} 
                <section class="category-sense-questions" senseindex="{{ senseindex - 1}} ">                    
                    {% for question in sense.questions %}
                        <p> {{ question }} </p>
                    {% endfor %} {# end question loop #}
                </section>
            {% endfor %} {# end category loop #}
        </div>
    {% endfor %} {# end sense loop #}
</div> {# end container #}


{#============================== END DATA CONTAINERS ==================================#}
{#=====================================================================================#}

{#=================================  START JAVASCRIPT ===================================#}
{#======================================================================================#}
<script>
     // Functions 
    ///////////////////////////////////////////////////////////////////////////////////////

    // Generic Functions
    ////////////////////////////////////////////////////////////////////////////////////////
    // create array script copied from internet
    // usage:
    //      createArray() creates empty 1D array
    //      createArray(2) creates 1D array of length 2
    //      createArray(3, 2) creates 2D array, first dimension length 3, second dimension length 2
    //      createArray(3,3,3,3) creates a 4D array where all dimensions have length 3
    function createArray(length) {
        var arr = new Array(length || 0),
            i = length;

        if (arguments.length > 1) {
            var args = Array.prototype.slice.call(arguments, 1);
            while(i--) arr[length-1 - i] = createArray.apply(this, args);
        }

        return arr;
    }

    // function to add the same event listener to every element in an array. 
    Array.prototype.addEventListener = function(eventname, eventfunction) {
        for (i=0 ; i<this.length ; i++)
            this[i].addEventListener(eventname, eventfunction);
    };

    // create a function to console log every element in an array
    Array.prototype.consolelog = function() {
        for (i=0 ; i<this.length ; i++)
            console.log(this[i]);
    };

    // convert Nodelists and HTLMCollections (and any other array like objects to an array.
    function convertToArray(arrayLikeObject) {
        var newArray = createArray(arrayLikeObject.length)
        for (var i=0 ; i<newArray.length; i++)
            newArray[i] = arrayLikeObject[i];

        return newArray;
    }

    // Functions that manipulate html elements in some way
    /////////////////////////////////////////////////////////////////////

</script>
