---
layout: layouts/base.njk
title: Add Senses
eleventyNavigation:
  key: Add Senses
  parent: Utilities
  order: 1
---
{#=================================    LAYOUT   ==================================#}
{#================================================================================#}
<section class="container-xl p-4">
    <h1 class="text-center pb-2"> Add and Edit Questions</h1>

    <!-- Text box to enter the name of the new sense -->
    <div class="d-inline-flex">
        <label class="fs-3" for="choosesense">
            Name of Sense to Edit:
        </label>
        <select id="choosesense" class="fs-3 p-1 ps-2 ms-1">
            {% for sense in allQuestions[0].senses %}
                <option value="{{ loop.index - 1 }}">
                    {{ sense.sense }}
                </option>
            {% endfor %}
        </select>
    </div>
    <div class="d-inline-flex mt-3">
        <label class="fs-3" for="addsenseinput">
            Name of Sense to Add: 
        </label>
        <input type="text" id="addsenseinput" rows=12 class="w-auto fs-3 ms-2">
        <button class="p-2 ms-5 bg-info rounded" id="add-sense-button" type="button">Add Sense</button>
    </div>
</section>

<!-- Context menu ---------------------------------------------------------------------------- -->
{# context menu #}
<section class="container-xl card mb-2">
    <nav class="d-flex justify-content-around py-4">
        <button class="p-2 bg-info rounded" id="savebutton" type="button">Save JSON File</button>
        {# button to save question answers #}
        <button class="p-2 bg-info rounded" id="readbutton" type="button">Read JSON File</button>
        {# button to show results #}
        <button class="p-2 bg-info rounded" id="resultsbutton" type="button">View JSON</button>
    </nav>
</section>

{# wrap everything into a card class #}
<div class='container-xl card py-2 mb-4'>
    
<!-- Progress bar ---------------------------------------------------------------------------- -->
{% include "progressgrid.njk" %}

{# Create Category name placeholder #}
<h2 class="p-3" id="category-name"> 
    {{ allQuestions[0].category }} for {{ questions[0].sense}}
</h2>

<section class="container-xl py-3 px-4" id="input-section">
    <!-- Text area to input the questions -->
    <label for="question-textarea">
        <h3>Add or edit questions for category here</h3>
    </label>
    <div class="d-flex justify-content-end mb-1">
        <button class="p-2 me-5 bg-info rounded" id="save-changes-button" type="button">Save Changes</button>
        <button class="p-2 bg-info rounded" id="undo-changes-button" type="button" >Undo Changes</button>
    </div>
    <textarea id="questions-textarea" rows=12 class="w-100"></textarea>

    {# next and previous buttons #}
    <div>
        <nav class="d-flex justify-content-between py-2"> {#  category nav buttons #}
            <button class="p-2 bg-info rounded" id="previous-category-button" type="button">Previous Category</button>
            <button class="p-2 bg-info rounded" id="next-category-button" type="button">Next Category</button>
        </nav>
        <nav class="d-flex justify-content-between py-3 pt-0"> {# sense nav buttons#}
            <button class="p-2 bg-info rounded" id="previous-sense-button" type="button">Previous Sense</button>
            <button class="p-2 bg-info rounded" id="next-sense-button" type="button">Next Sense</button>
            </div>
        </nav>
    </div>
</section>
</div> {# end card #}

<section class="container-xl py-3 px-4" id="view-area">
    <p>view of json goes here</p>
</section>

{#===============================   END LAYOUT   ==================================#}
{#================================================================================#}

{#=================================  START JAVASCRIPT ===================================#}
{#======================================================================================#}
<script type="text/javascript" src="../../js2/generic.js"></script>
<script type="text/javascript" src="../../js2/progressgrid.js"></script>
<script>
     // Functions 
    ///////////////////////////////////////////////////////////////////////////////////////


    // Functions that manipulate html elements in some way
    /////////////////////////////////////////////////////////////////////

    // Eventlistener function for progress grid
    function columnListener(column) {
        console.log('in columnListener');
        console.log(column);
        if (column.catindex != +currentCategoryIndex) {
            progressGrid[currentCategoryIndex].setProgressGridHighlight('LightGray');
            display(column.catindex, currentSenseIndex);
            column.setProgressGridHighlight('Black');
        }
    };

    // getCategoryVariables
    // This is an sync function that fetches the json file and sets
    // various global variables.
    // Note async means that it returns immediately and before tasks are completed.
    async function getCategoryVariables(){

        categoryArray = await fetchJson("../../json/allQuestions.json");

        maxCategoryIndex = categoryArray.length - 1;
        maxSenseIndex = categoryArray[0].senses.length - 1;

        questionArea.value = categoryArray[currentCategoryIndex].senses[currentSenseIndex].questions.join('\n');
        jsonView.innerHTML = '<pre>' + JSON.stringify(categoryArray, null, 3) + '</pre>';
    }

    function saveChanges() {
        categoryArray[currentCategoryIndex].senses[currentSenseIndex].questions = questionArea.value.split("\n");
        questionsChanged = false;
    }

    function undoChanges() {
        console.log('undoing changes');
        questionArea.value = categoryArray[currentSenseIndex].senses[currentSenseIndex].questions.join("\n");
    }

    function checkSave() {
        if (questionsChanged) {
            //console.log('THE QUESTIONS HAVE CHANGED NEED TO DO SOMETHING!!!');
            if (confirm("You made changes. Do you want to save?\nClick Ok to sove, otherwise click Cancel."))
                saveChanges();
            }
    }

    function setNextPreviousButtonTextColour(){
        previousCategoryButton.style.color = 'Black';
        nextCategoryButton.style.color = 'Black';
        previousSenseButton.style.color = 'Black';
        nextSenseButton.style.color = 'Black';

        if (+currentCategoryIndex == 0) 
            previousCategoryButton.style.color = 'LightGray';
        else if (+currentCategoryIndex == maxCategoryIndex)
            nextCategoryButton.style.color = 'LightGray';

        if (+currentSenseIndex == 0)
            previousSenseButton.style.color = 'LightGray';
        else if (+currentSenseIndex == maxSenseIndex)
            nextSenseButton.style.color = 'LightGray';
    }

    // handles the display for changes.
    function display(catIndex,senseIndex) {
        checkSave();

        category = categoryArray[+catIndex];
        sense = category.senses[+senseIndex];

        categoryTitle.innerText = category.category + ' for ' + sense.sense;
        questionArea.value = sense.questions.join('\n');

        currentCategoryIndex = +catIndex;
        currentSenseIndex = +senseIndex;
        questionsChanged = false;

        setNextPreviousButtonTextColour();
    }

    function addNewSense(newSense){

        // first check that the user really wants to do this
        if (!confirm(`Are you sure you want to add the new sense called ${newSense}?\nThis action can be undone only by refreshing the page and you will lose all your work.`))
            return;
        
        for (let i=0 ; i<categoryArray.length ; i++)
            categoryArray[i].senses.push({sense: newSense, questions: []});

        maxSenseIndex++;

         // add to end of chooseSense
        const option = document.createElement("option");
        option.text = newSense;
        option.value = maxSenseIndex;
        chooseSense.add(option);
        chooseSense.selectedIndex = maxSenseIndex;

        alert(`New Sense: ${newSense} has been added.`);

        display(0,maxSenseIndex);
    }

       /////////////////////////////////   End Functions  /////////////////////////////////////////////

    // Variables
    ////////////////////////////////////////////////

    // constants for particular html elements
    const jsonView = document.getElementById('view-area');
    previousCategoryButton = document.getElementById('previous-category-button');
    nextCategoryButton = document.getElementById('next-category-button');
    previousSenseButton = document.getElementById('previous-sense-button');
    nextSenseButton = document.getElementById('next-sense-button');


    // Category information elements
    const categoryTitle = document.getElementById('category-name');
    const questionArea = document.getElementById('questions-textarea')

    // Category Variables 
    // note getCategoryVariables is async and will thus return before tasks are completed.
    // DO NOT put console.log after this function.
    // All console.log should be inside the function.

    let categoryArray;
    let maxCategoryIndex;
    let maxSenseIndex
    getCategoryVariables();
    
    let currentCategoryIndex = 0;
    let currentSenseIndex = 0;
    let questionsChanged = false;

    // constants for structures of html elements
    const progressGrid = createProgressGrid(columnListener);
    //progressGrid.consolelog();

    // set things up
    progressGrid[0].setProgressGridHighlight('Black');
    previousCategoryButton.style.color = 'LightGray';
    previousSenseButton.style.color = 'LightGray';


    // add eventlisteners to buttons
    previousCategoryButton.addEventListener('click', () => {
        if (+currentCategoryIndex > 0)
            display(+currentCategoryIndex - 1, currentSenseIndex);
    });
    nextCategoryButton.addEventListener('click', () => {
        if (+currentCategoryIndex < maxCategoryIndex)
            display(+currentCategoryIndex + 1, currentSenseIndex);
    });

    previousSenseButton.addEventListener('click', () => {
        if (+currentSenseIndex > 0)
            display(currentCategoryIndex, currentSenseIndex - 1);
    });
    nextSenseButton.addEventListener('click', () => {
        if (+currentSenseIndex < maxSenseIndex)
            display(+currentCategoryIndex, currentSenseIndex + 1);
    });

    saveChangesButton = document.getElementById('save-changes-button');
    saveChangesButton.addEventListener('click',saveChanges);
    
    undoChangesButton = document.getElementById('undo-changes-button');
    undoChangesButton.addEventListener('click',undoChanges);

    viewJsonButton = document.getElementById('resultsbutton');
    viewJsonButton.addEventListener('click', function() {
        jsonView.innerHTML = '<pre>' + JSON.stringify(categoryArray, null, 3) + '</pre>';
    });

    questionArea.addEventListener('change', function() {
        questionsChanged = true;
    });

    chooseSense = document.getElementById('choosesense');
    chooseSense.addEventListener('change', (event) => {
        value = event.target.value;
        if (+value != +currentSenseIndex)
            display(currentCategoryIndex,value);
    });

    addSenseTextBox = document.getElementById('addsenseinput');
    addSenseTextBox.addEventListener('keyup', (event) => {
        if (event.keyCode == 13)
            addNewSense(addSenseTextBox.value);
    });
    addSenseButton = document.getElementById('add-sense-button');
    addSenseButton.addEventListener('click', () => {
        addNewSense(addSenseTextBox.value);
    });


    // Finally read and write json files
    saveButton = document.getElementById("savebutton");
    readButton = document.getElementById("readbutton");

    const options = {
        types: [
            {
                description: 'JSON Files',
                accept: {
                'application/json': ['.json'],
                },
            },
        ],
    };

    let fileHandle;
    readButton.addEventListener('click', async () => {
        [fileHandle] = await window.showOpenFilePicker(options);
        const file = await fileHandle.getFile();
        const contents = await file.text();
        categoryArray = JSON.parse(contents);
        jsonView.innerHTML = stringify(categoryArray,null,3);
    });

    // works but not in debugger
    saveButton.addEventListener('click', async () =>{
        try {
            let savehandle = await window.showSaveFilePicker(options);;
            const writable = await savehandle.createWritable();
            console.log(writable);
            await writable.write(JSON.stringify(categoryArray, null, 3));
            await writable.close();
        }
        catch(e) {
            console.log(e); 
        };
    });
   
</script>

