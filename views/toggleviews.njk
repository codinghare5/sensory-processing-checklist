---
layout: layouts/base.njk
title: Toggle Views
eleventyNavigation:
  key: Toggle Views
  parent: Views
  order: 3
---

{# First create buttons #}
<div class="container mb-5">
    <div class="row">
        {# button to toggle views#}
        <button type="button"  id="togglebutton" class="col-5 fs-4 px-5 bg-info rounded"> 
            View Senses First
        </button>
        {# button to save question answers #}
        <button class="col-3 bg-info fs-4 rounded" type="button">Save</button>
        {# button to show results #}
        <button class="col-4 bg-info fs-4 rounded" type="button">Show Results</button>
    </div>
</div>


{# create the interface #}

{# create and index from sense name to index #}
{% set senselookup = [] %}
{% for sense in questions %}
    {% set senselookup = (senselookup.push( {"{{sense.sense}}": loop.index} ), senselookup) %}
{% endfor %}

{% set datalist = [{"json": questions, "top": "sense", "side": "metacategory", "body": "category"},
                   {"json": meta, "top": "metacategory", "side": "category", "body": "sense"}] %}

{# set macro to return the text #}
{% macro get_text(item, locat) %}
  {% if locat === "sense" %}
    {% set text = item.sense %}
  {% elseif locat === "metacategory" %}
    {% set text = item.name %}
  {% else%}
    {% set text = item.category %}
  {% endif %}

  {{ text }}
{% endmacro%}

{% macro print_categories(data, topidpart, bodyarray, senseindex, sideindex) %}
    {% for bodyitem in bodyarray %}
        {% if data.body === "category" %}
            {% set bodyindex = bodyitem.index %}
        {% else %}
            {% set bodyindex = loop.index %}
        {% endif %}
        {% if data.top === "sense"%}
          {% set catindex = bodyindex %}
        {% else %} {# struct.top === metacategory #}
          {% set senseindex = bodyindex %}
          {% set catindex = sideindex %}
        {% endif %}

        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}">
                <button class="accordion-button collapsed" 
                            type="button" 
                            data-bs-toggle="collapse" 
                            data-bs-target="#collapse-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}" 
                            aria-expanded="false" 
                            aria-controls="collapse-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}">
                    {{ get_text(bodyitem, data.body) }}
                </button>
            </h2>

            <div id="collapse-{{ topidpart }}-{{ sideindex }}-{{ bodyindex }}" 
                        senseindex="{{ senseindex - 1 }}" catindex="{{ catindex - 1 }}"
                        class="accordion-collapse collapse QuestionCollapse-{{data.top}}" 
                        aria-labelledby="bodyaccordion"
                        data-bs-parent="#{{ topidpart }}-{{ sideindex }}">
                {#<div class="accordion-body">
                    <p>some body text</p>
                </div>#}
            </div>
        </div>

    {% endfor %}
{% endmacro %}

{% macro print_tab_content(data) %}
    {% for topitem in data.json %}

        {% if data.top === "sense" %}
            {% set idpart = topitem.sense | lower %}
            {% set sidearray = topitem.metacategories %}
            {% set senseindex = loop.index%}
        {% else %}
            {% set idpart = "metacategory" + loop.index %}
            {% set sidearray = topitem.categories %}
            {% set senseindex = -1 %} {# holding value #}
        {% endif %}

    
        {# START the tab's contents #}
        <div class="tab-pane fade{% if loop.first %} show active{% endif %}" 
                    id="nav-{{ idpart }}" 
                    role="tabpanel" 
                    aria-labelledby="nav-{{ idpart }}-tab">

            {# very important - it is the unique id of the parent #}
            {# START main accordion for sidebar, as a row #}
            {# create sidebare items #}
            <div class="accordion row" id="side-accordion-{{ idpart }}">
                <div class="col-md-3">  
                    {# START items in the sidebar, left column, responsive #}
                    {% for item in sidearray %}
                        {% if data.side === "category" %}
                            {% set sideindex = item.index %}
                        {% else %}
                            {% set sideindex = loop.index %}
                        {% endif %}

                        {% set base_id = idpart + '-' + sideindex %}
                    
                        <div class="accordion-item ">
                            <h2 class="accordion-header" id="heading-{{base_id}}">
                                <button class="accordion-button collapsed" type="button" 
                                            data-bs-toggle="collapse" 
                                            data-bs-target="#collapse-{{ base_id }}" 
                                            aria-expanded="false" 
                                            aria-controls="collapse-{{ base_id }}">
                                    {{ get_text(item,data.side) }}
                                </button>
                            </h2>
                        </div>
                    {% endfor %}
                </div> {# end col-md-3 #}

                {# Now create accordion collapse in the RHS #}
                {# This is means looping through sidearray again #}
                <div class="col-md-9">
                    {% for item in sidearray %}
                        {% if data.side === "category" %}
                            {% set sideindex = item.index %}
                            {% set bodyarray = item.senses %}
                        {% else %}
                            {% set sideindex = loop.index %}
                            {% set bodyarray = item.categories %}
                        {% endif %}

                        {% set base_id = idpart + '-' + sideindex %}

                        <div id="collapse-{{ base_id }}" class="accordion-collapse collapse" 
                                    aria-labelledby="heading-{{ base_id }}"
                                    data-bs-parent="#side-accordion-{{ idpart }}">
                                
                            {# this is the body inside accordion, the right colun, responsive #}
                            <div class="accordion-body">
                                <div class="accordion" id="{{ idpart }}-{{ sideindex }}">
                                    {% call print_categories(data, idpart, bodyarray, senseindex, sideindex) %}
                                    {% endcall %}
                                </div> 
                            </div>  {# END this is the body inside accordion #}
                        </div> {# end collapse#}
                    {% endfor %}
                </div> {# end col #}

            </div> {# END main accordion #}
        </div> {# END the tab's contents #}
    {% endfor %}  {# this view #}
{% endmacro %}


{# now create the top tabs - senses #}
{% for data in datalist %}
    <div class="container-xl" id="{{ data.top }}-first" style="display:none" ntopitems="{{ data.json | length }}">
        <div class="row">
            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    {% for topitem in data.json %}
                        {% if data.top === "sense" %}
                            {% set idpart = topitem.sense | lower %}
                        {% else %}
                            {% set idpart = "metacategory" + loop.index %}
                        {% endif %}

                        <button class="nav-link col-xxl-{{ 12 / data.json | length }}{% if loop.first %} active{% endif %}" 
                                id="nav-{{ idpart }}-tab" 
                                data-bs-toggle="tab" 
                                data-bs-target="#nav-{{ idpart }}" 
                                type="button" 
                                role="tab" 
                                aria-controls="nav-{{ idpart }}" 
                                aria-selected="{% if loop.first %}true{% else %}false{% endif %}">
                            {{ get_text(topitem, data.top) }}
                        </button>
                        
                    {% endfor %}
                </div>
            </nav>
        </div> {# end row #}

            <div class="row">
                {# START of the tab, main container #}
                {# this part should occure only once, so it is outside of the loop #}
                <div class="tab-content {{data.top}}-sidebar" id="{{idpart}}-nav-tabContent">
                        {% call print_tab_content(data) %}
                        {% endcall %}
                </div>
        </div> {# end row #}
    </div> <!-- end of container for view -->
{% endfor %}


{# Create a list of groups of questions 
        these are the same irrespective of the view #}

{% set questionOptions = [ {"label": "Was True", "id": "was-true", "value": 2},
                          {"label": "True Now", "id": "true-now", "value": 3},
                          {"label": "Not Sure", "id": "not-sure", "value": 1},
                          {"label": "False", "id": "false", "value": 0}] %}
{# create question sets in the form of accordion-body #}
{# <div class="container" id="questionset-container" style="display:none"> #}
    {% for sense in questions %}
        {% set senseindex = loop.index %}
        {% for metacat in sense.metacategories %}
            {% for cat in metacat.categories %}   
                {% set base_id = sense.sense + '-' + cat.index %}

                <div class="accordion-body QuestionAccordionBody" id={{base_id}}
                                senseindex="{{senseindex - 1 }}" catindex="{{cat.index - 1 }}">
                    {% for question in cat.questions %}
                        {% set questionName = base_id + '-' + loop.index %}
                        <fieldset class="pb-3" id="{{ questionName }}" value=0>
                            <legend class="fs-6">{{ question }}</legend>
                            {# use class=row to spread radio inputs #}
                            <div class="row row-cols-auto justify-content-center">
                                {% for opt in  questionOptions %}
                                    <div class="form-check form-check-inline col border border-1 rounded">
                                        <input class="form-check-input ps-2" type="checkbox" 
                                                    name="{{ questionName }}-{{ opt.id }}" 
                                                    question_id="{{ questionName }}"
                                                    id="{{ questionName }}-{{opt.id}}" 
                                                    value="{{ opt.value }}"
                                                    {% if opt.id == "false" %} checked="checked"{% endif %}>
                                        <label class="form-check-label fs-6" for="{{ questionName }}-{{ opt.id }}">
                                            {{ opt.label }}
                                        </label>
                                    </div>
                                {% endfor %}
                            </div> <!-- end row of checkboxes-->
                        </fieldset>
                    {% endfor %} {# end question loop #}
                </div>
            {% endfor %} {# end category loop #}
        {% endfor %} {# end metacategory loop #}
    {% endfor %} {# end sense loop #}
{# </div> end container #}


<script>

    // create array script copied from internet
    // usage:
    //      createArray() creates empty 1D array
    //      createArray(2) creates 1D array of length 2
    //      createArray(3, 2) creates 2D array, first dimension length 3, second dimension length 2
    //      createArray(3,3,3,3) creates a 4D array where all dimensions have length 3
    function createArray(length) {
    var arr = new Array(length || 0),
        i = length;

    if (arguments.length > 1) {
        var args = Array.prototype.slice.call(arguments, 1);
        while(i--) arr[length-1 - i] = createArray.apply(this, args);
    }

    return arr;
}


    // set up default view: sensesfirst
    var togglestatus = "categoryfirst";
    const sensesTopTabs = document.getElementById("sense-first");
    const metacategoryTopTabs = document.getElementById("metacategory-first");
    metacategoryTopTabs.style.display = "block";

    // create 2D array of questions
    const numberOfCategories = 21;
    const questionAccordionList = document.querySelectorAll(".QuestionAccordionBody");
    console.log('number of senses: ' + sensesTopTabs.getAttribute("ntopitems"))
    questionArray = createArray(+sensesTopTabs.getAttribute("ntopitems"), +numberOfCategories);

    if (questionAccordionList.length != sensesTopTabs.length * +numberOfCategories)
        console.log("ERROR number of questions sets does not equal number of senses + number of categories")

    for (i=0 ; i<questionAccordionList.length; i++){
        question = questionAccordionList[i];
        senseindex = question.getAttribute("senseindex");
        catindex = question.getAttribute("catindex");
        console.log('coords for question set ' + i + ' are [' + senseindex + ',' + catindex + ']');
        questionArray[senseindex][catindex] = question;
    }

    // attach questions
    const sensesQuestionCollapseList = document.querySelectorAll(".QuestionCollapse-sense");
    const metacategoryQuestionCollapseList = document.querySelectorAll(".QuestionCollapse-metacategory");
    
    function attachQuestions(questionCollapseList){
        for (i=0 ; i<questionCollapseList.length ; i++){
            accordionCollapse = questionCollapseList[i];
            senseindex = accordionCollapse.getAttribute("senseindex");
            catindex = accordionCollapse.getAttribute("catindex");

            accordionCollapse.appendChild(questionArray[senseindex][catindex]);
        }
    }
    attachQuestions(metacategoryQuestionCollapseList);

    // Get toggle button and assign a function
    const togglebutton = document.getElementById("togglebutton");
    togglebutton.addEventListener('click', function() {
        if (togglestatus === "categoryfirst") {
            togglestatus = "sensesfirst";
            togglebutton.innerHTML = "View Category First";
            metacategoryTopTabs.style.display = "none";
            sensesTopTabs.style.display = "block";
            console.log('attaching questions: senses')
            attachQuestions(sensesQuestionCollapseList);
        }
        else {
            togglestatus = "categoryfirst";
            togglebutton.innerHTML = "View Senses First";
            sensesTopTabs.style.display = "none";
            metacategoryTopTabs.style.display = "block";
            console.log('attaching questions: metacategory')
            attachQuestions(metacategoryQuestionCollapseList);
        }
    });

  // grab all the buttons with class 'form-check-input'
  const questionButtons = document.querySelectorAll(".form-check-input")
  console.log('there are ' + questionButtons.length + ' question buttons')

  // loop through buttons setting an event listener
  for (i=0 ; i<questionButtons.length ; i++) {
    questionButtons[i].addEventListener('change', function() {
      //console.log(this.id + ' ' + this.getAttribute("question_id"));
      
      const formwrapper = document.getElementById(this.getAttribute("question_id"));
      var currentvalue = formwrapper.getAttribute("value");
      const thisvalue = this.getAttribute("value");
      const buttons = formwrapper.getElementsByTagName("input");
      const falsebutton = buttons[3];
      const notsurebutton = buttons[2]
      const truebutton = buttons[1];
      const wastruebutton = buttons[0];
      //console.log(buttons);
      
      var newvalue;
      if (!this.checked) {
        //console.log(this.checked);
        if (this == falsebutton) { // if false button do nothing else
          falsebutton.checked=true;
        } else {
          //this.removeAttribute('checked');
          newvalue = +currentvalue - +thisvalue; //+thisvalue converts thisvalue to an int
          if (newvalue == 0){ // no buttons are active
            falsebutton.checked=true;
            formwrapper.setAttribute("value",0);
          }
          else { // one other button is active (can't be more than one)
            formwrapper.setAttribute("value",newvalue);
          }
        } 
      }
      else { // the button was not active
        //console.log(this.checked);
        if (this === falsebutton) {
          //console.log("It is false button.");
          formwrapper.setAttribute("value",0);
          for (j=0; j<buttons.length - 1 ; j++)
            buttons[j].checked=false;
        }
        else {
          //console.log("It is NOT false button.");
          falsebutton.checked=false;
          if (this === notsurebutton) {
            //console.log("It is not-sure button.");
            truebutton.checked=false;
            wastruebutton.checked=false;
            formwrapper.setAttribute("value",1);
          }
          else { // button is either wastruebutton or nowtruebutton
            //console.log("First two buttons.");
            if (notsurebutton.checked){
              //console.log("It is not-sure button.");
              notsurebutton.checked=false;
              falsebutton.checked=false;
              currentvalue = 0;
            }
            newvalue = +currentvalue + +thisvalue;
            //console.log('currentvalue: ' + currentvalue + ' thisvalue: ' + thisvalue + ' newvalue: ' + newvalue);
            formwrapper.setAttribute("value",newvalue)
          }
        }
        //this.setAttribute("checked", "checked");
      } 
      //console.log('form value:' + formwrapper.getAttribute("value"));
    }); // end function definition
  } // end loop through buttons

  console.log('added event listeners')
</script>


