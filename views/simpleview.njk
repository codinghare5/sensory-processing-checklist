---
layout: layouts/base.njk
title: Simple View
eleventyNavigation:
  key: Simple View
  parent: Views
  order: 5
---
<section class="container-xl p-4">
    <h1 class="text-center"> Sensory Processing Checklist Questions</h1>

    {# Instructions #}
    <h2>Instructions</h2>
    <p>Please answer the question according to the following options:</p>
    <ul>
        <li><strong>Was True</strong>: was true at any time in the past.</li>
        <li><strong>True</strong>: True now (if it was true and is true now tick both answers)</li>
        <li><strong>Not Sure</strong>: Not sure or don't know</li>
         <li><strong>False</strong>: False (if the statement is not true)</li>
    </ul>
    <p>Please try to answer all the questions.</p>

    <h3>Navigation</h3>
    <p>The simplest way to work your way through the questions is simply to answer them in order presented, clicking the next button when you are ready to move forward. The progress grid highlights the column for the questions that are currently being answered.</p>

    <p>The progress grid will be coloured in as you answer the questions. This will provide you with an interim indication of the results.</p>

    <p>If you want to move to a different set of answers, simply click on the appropriate column of the progress grid.</p>

    <h3>Saving results</h3>
    <p>It is possible to save answers and read them in again. To do so, click the save and read buttons below.<br>
    Files will be downloaded to your download folder.</p>
</section>

<!-- Context menu ---------------------------------------------------------------------------- -->
{# context menu #}
<section class="container-xl card mb-2">
    <nav class="d-flex justify-content-around py-4">
        {# button to save question answers #}
        <button class="p-2 bg-info fs-5 rounded" id="savebutton" type="button">Save Answer File</button>
        {# button to save question answers #}
        <button class="p-2 bg-info fs-5 rounded" id="readbutton" type="button">Read Answer File</button>
        {# button to show results #}
        <button class="p-2 bg-info fs-5 rounded" id="resultsbutton" type="button">Show Results</button>
    </nav>
</section>

{# Create Category name placeholder #}
<h2 class="text-center py-2" id="category-name"> {{ categorysummary[0].name }} </h2>

{# wrap everything below category name in a card #}
<div class='container-xl card py-2 mb-4'>
<!-- Progress bar ---------------------------------------------------------------------------- -->
{# create progress bar #}
<section class="container-xl py-3 px-5" id="progress-grid">
    <div class="row bg-white">
        {% for metacat in meta %}
            {% for category in metacat.categories %}
                {% set catindex = category.index %}
        
                <div class="col p-0 progress-column" style="border: 2px solid LightGray" 
                            catindex="{{ catindex - 1 }}">
                    {% for sense in category.senses %}
                    <div class="progress-item" 
                        style="width: auto; height:20px; border: 1px solid; border-color: LightGray;"
                        senseindex="{{ loop.index - 1 }}">
                    </div>
                    {% endfor %}
                </div>

            {% endfor %}
        {% endfor %}
    </div>
</section>

<!-- Information about the category ---------------------------------------------------------------------------- -->
{# Wrap it inside a container, so it desn't stand out #}
<section class="container-xl">
    {# Create Area to hold information about the category - put the text for the first category in it 
        This should be an accordion #}
    <div class="accordion py-3" id="category-description">
      <div class="accordion-item">
        <h2 class="accordion-header">
          <button class="accordion-button" type="button" data-bs-toggle="collapse" 
                    data-bs-target="#category-collapse" aria-expanded="true" 
                    aria-controls="categorycollapse"
                    id="category-description-button">
                About {{ categoryinfo[0].name }}
          </button>
        </h2>
        <div id="category-collapse" class="accordion-collapse collapse show" 
                aria-labelledby="category-description-header" 
                data-bs-parent="#category-description">
          <div class="accordion-body" id="category-description-body">
            {{ categoryinfo[0].description}}
          </div>
        </div>
      </div>
    </div>
</section>

<!-- END Information about the category ---------------------------------------------------------------------------- -->

{# body #}
<!-- Container with the set of questions ---------------------------------------------------------------------------- -->
<section class="container-xl">
    {# button to open all accordions #}
    <div class="pt-3">
     <button class="p-2 bg-info fs-5 rounded float-end my-2" id="openallbutton" type="button">Open All</button>
    </div>
    {# body accordion of sets of questions labelled by sense #}
    <div class="accordion" id="bodyaccordion">
        {# create a set of sense accordions #}
        {% for sense in questions %}
            <div class="accordion-item">
                {% set sensestr = sense.sense | lower %}
                <h2 class="accordion-header" id="{{ sensestr }}-accordion-header">
                    <button class="accordion-button" type="button" 
                            data-bs-toggle="collapse" 
                            data-bs-target="#{{ sensestr }}-collapse" 
                            aria-expanded="false" 
                            aria-controls="{{ sensestr }}-collapse">
                        {{ sense.sense }} Questions
                    </button>
                </h2>
                <div id="{{ sensestr }}-collapse" class="accordion-collapse collapse" 
                        aria-labelledby="{{ sensestr }}-accordion-header" data-bs-parent="#bodyaccordion">
                    <div class="accordion-body">
                        {{ sense.sense }} questions for this category will go here.
                    </div>
                </div>
            </div> {# end accordion item #}
        {% endfor %}
    </div> {# end accordion #}

    {# next and previous buttons #}
    <div>
        <nav class="d-flex justify-content-between py-3">
            <button class="p-2 bg-info fs-5 rounded" id="previousbutton" type="button">Previous</button>
            <button class="p-2 bg-info fs-5 rounded" id="nextbutton" type="button">Next</button>
        </nav>
    </div>
</section> {# end container#}
</div>


{#=============================== END BASIC PAGE LAYOUT =================================================#}



{#=======================================================================================================#}



{#===================== START COMPONENTS TO BE USED WITH JAVASCRIPT =====================================#}

{# Create header for category names and paragraphs for category descriptions #}
{# Creating them together inside a <div> with and id makes them easy to extract in javascript #}
<div id="category-container" style="display:none"> 
{# simply holds <p> elements of category descriptions for easy retrieval #}
    {% for cat in categoryinfo %}
        <h2 catindex="{{ cat.index }}"> {{ cat.name }}</h2>
        <p catindex="{{ cat.index }}"> {{ cat.description }}</p>
    {% endfor %}
</div>

{# Create a container to hold groups of questions along with the short description #}

{# macro work out and return the summary text for a category and sense #}
{% macro get_category_summary(catindex, senseindex) %}
    {% set catsenses = categorysummary[catindex].senses %}
    {% if senseindex == 1 %}
        {% set text = catsenses.vision %}
    {% elseif senseindex == 2 %}
        {% set text = catsenses.hearing %}
    {% elseif senseindex == 3 %}
        {% set text = catsenses.touch %}
    {% elseif senseindex == 4 %}
        {% set text = catsenses.smell %}
    {% elseif senseindex == 5 %}
        {% set text = catsenses.taste %}
    {% elseif senseindex == 6 %}
        {% set text = catsenses.proprioception %}
    {% elseif senseindex == 7 %}
        {% set text = catsenses.balance %}
  {% endif %}

  {{ text }}
{% endmacro%}

{% set questionOptions = [ {"label": "Was True", "id": "was-true", "value": 2},
                          {"label": "True Now", "id": "true-now", "value": 3},
                          {"label": "Not Sure", "id": "not-sure", "value": 1},
                          {"label": "False", "id": "false", "value": 0}] %}
{# create question sets  #}
<div class="container-xl pt-5" id="questionset-container" style="display:none">
    {% for category in categoryquestions %}
        {% set catindex = category.index %}

        <div class="category-questionset" catindex="{{catindex - 1 }}">
            {% for sense in category.senses %} 
                {% set senseindex = loop.index %} 
                {% set base_id = sense.sense + '_' + catindex %}

                <div class="category-sense-questions" senseindex="{{ senseindex - 1}} ">
                    <p><strong>{{ get_category_summary(catindex,senseindex) }}</strong></p>
                    
                    {% for question in sense.questions %}
                        {% set questionName = base_id + '-' + senseindex + '-' + loop.index %}
                        <fieldset class="pb-3" id="{{ questionName }}" value=0>
                            <legend class="fs-6">{{ question }}</legend>
                            {# use class=row to spread radio inputs #}
                            <div class="row row-cols-auto justify-content-center">
                                {% for opt in  questionOptions %}
                                    <div class="form-check form-check-inline col border border-1 rounded">
                                        <input class="form-check-input ps-2" type="checkbox" 
                                                    name="{{ questionName }}-{{ opt.id }}" 
                                                    question_id="{{ questionName }}"
                                                    id="{{ questionName }}-{{opt.id}}" 
                                                    value="{{ opt.value }}"
                                                    {% if opt.id == "false" %} checked="checked"{% endif %}>
                                        <label class="form-check-label fs-6" for="{{ questionName }}-{{ opt.id }}">
                                            {{ opt.label }}
                                        </label>
                                    </div>
                                {% endfor %}
                            </div> <!-- end row of checkboxes-->
                        </fieldset>
                    {% endfor %} {# end question loop #}
                </div>
            {% endfor %} {# end category loop #}
        </div>
    {% endfor %} {# end sense loop #}
</div> {# end container #}


{#===================== END COMPONENTS TO BE USED WITH JAVASCRIPT =====================================#}



{#=======================================================================================================#}



{#====================================== JAVASCRIPT =======================================================#}

<script>
    // Functions 
    ///////////////////////////////////////////////////////////////////////////////////////

    // Generic Functions
    ////////////////////////////////////////////////////////////////////////////////////////

    // create array script copied from internet
    // usage:
    //      createArray() creates empty 1D array
    //      createArray(2) creates 1D array of length 2
    //      createArray(3, 2) creates 2D array, first dimension length 3, second dimension length 2
    //      createArray(3,3,3,3) creates a 4D array where all dimensions have length 3
    function createArray(length) {
        var arr = new Array(length || 0),
            i = length;

        if (arguments.length > 1) {
            var args = Array.prototype.slice.call(arguments, 1);
            while(i--) arr[length-1 - i] = createArray.apply(this, args);
        }

        return arr;
    }

    // function to add the same event listener to every element in an array. 
    Array.prototype.addEventListener = function(eventname, eventfunction) {
        for (i=0 ; i<this.length ; i++)
            this[i].addEventListener(eventname, eventfunction);
    };

    // create a function to console log every element in an array
    Array.prototype.consolelog = function() {
        for (i=0 ; i<this.length ; i++)
            console.log(this[i]);
    };

   
  
    // Functions that manipulate html elements in some way
    /////////////////////////////////////////////////////////////////////

    //function to set or remove the progress grid highlight:
    //  just set the color
    //      - LightGray for no highlight
    //      - Black for highlight
    // or change colours to suit
    function setProgressGridHighlight(catindex, colour){
        var item = progressGrid[+catindex].column;
        item.style.borderColor = colour;
    }

    // displayCategory
    // changes html inner of
    //      category-name
    //      category-description-header
    //      category-description-body
    // also highlights the correct column in the progress grid
    //
    // Assumes currentindex is declared somewhere and has an appropriate value
    function displayCategory(catindex) {
        console.log("in displayCategory: " + catindex + ' ' + currentIndex);
        if (+catindex == +currentIndex)
            return; // nothing to do

        // set category header and description
        console.log("setting category info for category " + catindex);
        var item = categoryArray[+catindex];
        categoryTitle.innerHTML = item.name;
        categoryButton.innerHTML =  'About ' + item.name;
        categoryBody.innerHTML = item.description;

        // sort out the highlighting of the progress grid columns
        setProgressGridHighlight(currentIndex,"LightGrey");
        setProgressGridHighlight(catindex, "Black")
        currentIndex = catindex;

        // set body accordion bodyies
        console.log("setting accordion bodies");
        console.log(item);
        for (var i=0; i<accordionBodies.length; i++)
            accordionBodies[i].innerHTML = item.questions[i];

    }



    // create an array of information to do with each category:
    //      - name (for the header)
    //      - description (for the category description)
    // This will be used to set html inners for the elements with ids
    //      - category-name and 
    //      - category-description-body
    function createCategoryArray() {

        // (local) constructor for Category
        function Category(name,description,questionSets){
            this.name = name.innerHTML;
            this.description = description.innerHTML;

            // create an array of questions grouped by sense
            questionsArray = createArray(questionSets.length);
            for (var j=0; j<questionSets.length; j++){
                qset = questionSets[j];
                senseindex = qset.getAttribute('senseindex');
                questionsArray[+senseindex] = qset.innerHTML;
            }
            this.questions = questionsArray;
        }

        // Grab the categoryContainer and create (DOM) arrays of headers and descriptions
        const categoryContainer = document.getElementById("category-container")
        const headers = categoryContainer.getElementsByTagName("h2");
        const descriptions = categoryContainer.getElementsByTagName("p");

        // Grab the questionset container and create a DOM array of category questionsets
        const categoryQuestionsets = document.querySelectorAll('#questionset-container .category-questionset');

        // create and fill an array of Category
        catArray = createArray(headers.length);
        for (i=0 ; i<headers.length ; i++) {
            senseQSets = categoryQuestionsets[i].querySelectorAll('.category-sense-questions')
            //console.log(senseQSets)
            catArray[i] = new Category(headers[i], descriptions[i], senseQSets);
        }
        return catArray;
    }

    // Create progress grid column array
    //  This is a list of the columns of the grid where each item contains
    //      a progress-column
    //      an array of progress-item
    // An array of ProgressGrid is returned
    function createProgressGrid() {

        // (local) constructor for ProgressGrid
        // column is a DOM object with class progress-column
        function ProgressGrid(column, catindex){
            this.column = column;

            items = column.querySelectorAll(".progress-item");
            itemsArray = createArray(items, length);
            for (i=0 ; i<items.length ; i++) {
                item = items[i];
                itemsArray[+item.getAttribute("senseindex")] = item;
                item.addEventListener("click", function(){ displayCategory(catindex); });
            }

            this.senseboxes = itemsArray
        }

        const pGrid = document.getElementById("progress-grid");
        const progressColumnList = pGrid.querySelectorAll(".progress-column");
        const progressArray = createArray(progressColumnList.length);
        for (j=0 ; j<progressArray.length ; j++){
            item = progressColumnList[j];
            catindex = item.getAttribute("catindex");
            progressArray[+catindex] = new ProgressGrid(item, catindex);
        }

        return progressArray;
    }


    /////////////////////////////////   End Functions  /////////////////////////////////////////////

    // Variables
    ////////////////////////////////////////////////

    // constants for particular html elements

    // Category information elements
    const categoryTitle = document.getElementById('category-name');
    const categoryButton = document.getElementById('category-description-button');
    const categoryBody = document.getElementById('category-description-body');

    // Body
    openAllButton = document.getElementById('openallbutton');
    accordionBodies = document.querySelectorAll('#bodyaccordion .accordion-body');
    console.log(accordionBodies);
    


    // constants for structures of html elements
    const categoryArray = createCategoryArray();
    const progressGrid = createProgressGrid();
    categoryArray.consolelog();
    //progressGrid.consolelog();

    // other constants
    var currentIndex = 10; // doesn't matter what the value is as long as it isn't 0
    displayCategory(0);

    // Add Event Listeners

    // get next and previous buttons
    prevButton = document.getElementById('previousbutton');
    nextButton = document.getElementById('nextbutton');
    categoryNavigationButtons = [prevButton, nextButton];
    categoryNavigationButtons.addEventListener('click', function(event) {
        if(event.target.id == 'previousbutton') {
            var newIndex = currentIndex;
            +currentIndex > 0 ? --newIndex: newIndex = categoryArray.length -1;
            displayCategory(+newIndex);
        }

        if(event.target.id == 'nextbutton') {
            var newIndex = currentIndex;
            +currentIndex < categoryArray.length -1 ? ++newIndex: newIndex=0;
            displayCategory(+newIndex);
        }
    });



</script>