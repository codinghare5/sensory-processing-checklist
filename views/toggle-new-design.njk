---
layout: layouts/base.njk
title: Toggle Views
eleventyNavigation:
  key: New Toggle
  parent: Views
  order: 4
---

{# Legend:
    BODY, Body - main part, page's content, the Body of the whole element

    BUTTON - toggling, collapsing

    COLLAPSE CATEGORY, collapse - corresponding sidebar button and its collapsible element further down

    CONSTANTS - nunjucks constants on top, javascript constants on the bottom

    CONTENT - repeatable part of the body to be toggled by style:display

    DISPLAY - part to be toggled with meta button, use style:display

    END - there is very high probability, that an element ends here :)

    INITIAL STATE - state object; keeps things together when events fire

    page-body - class for the Body

    part to be looped - for loop is being used for this part - DRY convention

    QUESTION - question's contents go here

    SIDEBAR, Sidebar - main part, page's sidebar, the Sidebar of the whole element

    SHOW - places where class 'show' happends to be

    TODO - easly find something to do next, tag some feature

    TOGGLE - part of the process of toggling the view between meta/senses

 #}


{# Nunjucks CONSTANTS #}

{#  #}
{% set datalist = [{"json": questions, "top": "sense", "side": "metacategory", "body": "category"},
                   {"json": meta, "top": "metacategory", "side": "category", "body": "sense"}] %}

{% set questionOptions = [ {"label": "Was True", "id": "was-true", "value": 2},
                          {"label": "True Now", "id": "true-now", "value": 3},
                          {"label": "Not Sure", "id": "not-sure", "value": 1},
                          {"label": "False", "id": "false", "value": 0}] %}

{# END Nunjucks CONSTANTS #}


{# Nunjucks FUNCTIONS #}

{# set macro to return the text #}
{% macro get_text(item, locat) %}
  {% if locat === "sense" %}
    {% set text = item.sense %}
  {% elseif locat === "metacategory" %}
    {% set text = item.name %}
  {% else%}
    {% set text = item.category %}
  {% endif %}

  {{ text }}
{% endmacro%}

{# END Nunjucks FUNCTIONS #}


<div class="d-flex align-items-stretch">
{#  SIDEBAR #}
    <div class="sidebar py-3 flex-shrink-1 show" id="sidebar">

        <h6 class="sidebar-heading">Toggle View</h6>
        <ul class="list-unstyled">
            <li class="fs-4">
                {# TOGGLE button - toggle views on click #}
                <i class="bi bi-toggles"></i>
                <button type="button"  id="togglebutton" class="btn btn-light">
                    View Senses First
                </button>
            </li>
        </ul>

        {# ------------ Sidebar part to be looped depending on TOGGLE ------------ #}
        {# Two views, two versions, one displayed as a block and the other not displayed #}
        {% for data in datalist %}
            <div class="toggleThisPart {{ data.top }}-first" id="sidebar-{{ data.top }}-first" style="display:none" ntopitems="{{ data.json | length }}">
                
                <h6 class="sidebar-heading">Meta</h6>
                <ul class="list-unstyled" id="list-{{data.top}}">
                    {# ------------ Sidebar buttons listed - to be looped depending on TOGGLE ------------ #}
                    {% for topitem in data.json %}

                        {% if data.top === "sense" %}
                            {% set idpart = topitem.sense | lower %}
                            {% set sidearray = topitem.metacategories %}
                            {% set senseindex = loop.index%}
                        {% else %}
                            {% set idpart = "metacategory" + loop.index %}
                            {% set sidearray = topitem.categories %}
                            {% set senseindex = -1 %} {# holding value #}
                        {% endif %}

                        <li class="fs-4">
                            {# BUTTON collapsed #}
                            <button type="button" 
                                        class="accordion-button btn-light collapsed" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target=".multi-collapse-{{idpart}}"
                                        role="button" 
                                        aria-expanded="false" 
                                        aria-controls="body-{{idpart}} {{idpart}}">
                                {{ get_text(topitem, data.top) }}
                            </button>

                            {# TODO: FUNCTIONALITY remove submenu items and add pagination inside Card instead #}
                            {# SHOW element#}
                            <ul class="SidebarCollapse multi-collapse-{{idpart}} collapse" id="{{idpart}}" data-bs-parent="#list-{{data.top}}">
                                {# ------------ Category buttons listed - to be looped depending on TOGGLE ------------ #}
                                {% set mainLoopIndex = loop.index %}
                                {% for item in sidearray %}
                                    {% if data.side === "category" %}
                                        {% set sideindex = item.index %}
                                    {% else %}
                                        {% set sideindex = loop.index %}
                                    {% endif %}

                                    {% set base_id = idpart + '-' + sideindex %}

                                    {# List of category buttons #}
                                    <li>
                                        {# TODO: coresponding icon, class="bi bi-{icon-slug}" #}
                                        {# COLLAPSE CATEGORY #}
                                        {# <i class="bi bi-toggles"></i> #}
                                        {# class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" #}
                                        {# BUTTON collapsed #}
                                        <button type="button"  
                                                    id="button-{{base_id}}" 
                                                    class="accordion-button btn-light collapsed" 
                                                    data-bs-toggle="collapse" 
                                                    data-bs-target="#collapse-{{base_id}}" 
                                                    aria-expanded="false" 
                                                    aria-controls="collapse-{{base_id}}">
                                            {{ get_text(item,data.side) }}
                                        </button>
                                    <li>
                                    {# End List of category buttons #}
                                {% endfor %}
                                {# ------------ Category buttons listed - to be looped depending on TOGGLE ------------ #}
                            </ul>
                        </li>
                    {% endfor %}
                    {# ------------ End Sidebar buttons listed - to be looped depending on TOGGLE ------------ #}
                </ul>
            </div>
        {% endfor %}
        {# ------------ End Sidebar part ------------ #}

    </div>
{#  END SIDEBAR #}
    
{#  BODY #}
    <div class="page-body w-100 d-flex flex-wrap">
        <div class="container-fluid px-lg-2 px-xl-3">
            
            {# page breadcrumb #}
            {# <div class="page-breadcrumb">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">Page 1</li>
                </ul>
            </div> #}
            
            {# create progress bar #}
            <div class="container-xl progress-bar bg-white">
                <div class="row">
                    {% for metacat in meta %}
                        {% for category in metacat.categories %}
                        {% set catindex = category.index %}
                    
                        <div class="col p-0" style="border: 2px solid LightGray">
                            {% for sense in category.senses %}
                            <div class="progress-item" 
                                style="width: auto; height:20px; border: 1px solid; border-color: LightGray;"
                                senseindex="{{ loop.index - 1 }}"
                                catindex="{{ catindex - 1 }}">
                            </div>
                            {% endfor %}
                        </div>
                
                        {% endfor %}
                    {% endfor %}
                </div>
            </div>
            
            {# ------------ CONTENT Body part to be looped - depends on TOGGLE ------------ #}
            {% for data in datalist %}
            {# THIS1 - metacategory-first / sense-first - main body container #}
            <div class="container-xl toggleThisPart {{ data.top }}-first" id="{{ data.top }}-first" style="display:none" ntopitems="{{ data.json | length }}">

                {% for topitem in data.json %}

                    {% if data.top === "sense" %}
                        {% set idpart = topitem.sense | lower %}
                        {% set sidearray = topitem.metacategories %}
                        {% set senseindex = loop.index%}
                    {% else %}
                        {% set idpart = "metacategory" + loop.index %}
                        {% set sidearray = topitem.categories %}
                        {% set senseindex = -1 %} {# holding value #}
                    {% endif %}
                    
                    {# TODO: FUNCTIONALITY add pagination to page-header, always show one category at any given time #}
                    {# ------------ CONTENT DISPLAY multi-collapse inside Body - part to be looped - depends on TOGGLE ------------ #}
                    {# SHOW element #}
                    <section class="BodyCollapse multi-collapse-{{idpart}} collapse" 
                                    id="body-{{idpart}}"
                                    data-bs-parent="#list-{{data.top}}">
                        {# Page header #}
                        <div class="page-header">
                            {# Page 1 or Category Name - depends on TOGGLE #}
                            <h1 class="page-heading">{{ get_text(topitem, data.top) }}</h1>
                        </div>
                        
                        {# Page content #}
                        <section>
                            <div class="row">
                                <div class="col-lg-12 mb-5">

                                    {# Card #}
                                    <div class="card" id="accordion-parent-{{idpart}}">

                                        {% set mainLoopIndex = loop.index %}
                                        {% for item in sidearray %}
                                            {% if data.side === "category" %}
                                                {% set sideindex = item.index %}
                                                {% set bodyarray = item.senses %}
                                            {% else %}
                                                {% set sideindex = loop.index %}
                                                {% set bodyarray = item.categories %}
                                            {% endif %}

                                            {% set base_id = idpart + '-' + sideindex %}

                                            {# COLLAPSE CATEGORY #}
                                            {# SHOW element #}
                                            <div class="card-contents SideCollapse collapse" id="collapse-{{base_id}}"
                                                        sideindex={{sideindex}}
                                                        sidetype="{{ data.top }}"
                                                        baseid="{{base_id}}"
                                                        data-bs-parent="#accordion-parent-{{idpart}}">
                                                {# Card - header #}
                                                <div class="card-header d-flex justify-content-between">
                                                    {# 1. Category or Sense Name - depends on TOGGLE #}
                                                    <h4 class="card-heading">{{ get_text(item,data.side) }}</h4>
                                                    {# Pagination #}
                                                    {# <nav aria-label="Page navigation example">
                                                        <ul class="pagination justify-content-end">
                                                        <li class="page-item disabled">
                                                            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                                                        </li>
                                                        <li class="page-item"><a class="page-link" href="#">1</a></li>
                                                        <li class="page-item"><a class="page-link" href="#">...</a></li>
                                                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                                                        <li class="page-item">
                                                            <a class="page-link" href="#">Next</a>
                                                        </li>
                                                        </ul>
                                                    </nav> #}
                                                </div>

                                                {# Card - body #}
                                                <div class="card-body">
                                                    {# Card - description #}
                                                    <p class="card-description" id="description-{{ idpart }}-{{ sideindex }}">
                                                        Lorem ipsum dolor sit amet consectetur adipisicing elit. 
                                                        Repudiandae minima cumque ab at quia numquam, 
                                                        similique soluta dolores ut sequi maiores non optio pariatur provident.
                                                    </p>
                                                    <hr class="bg-gray-400 my-4">

                                                    {# Card - form #}
                                                    <form>
                                                        {# Card - accordion #}
                                                        {# ------------ Card - accordion - part to be looped - depends on TOGGLE ------------ #}
                                                        <div class="accordion accordion-flush" id="{{ idpart }}-{{ sideindex }}">
                                                            {% for bodyitem in bodyarray %}
                                                                {% if data.body === "category" %}
                                                                    {% set bodyindex = bodyitem.index %}
                                                                {% else %}
                                                                    {% set bodyindex = loop.index %}
                                                                {% endif %}
                                                                {% if data.top === "sense"%}
                                                                    {% set catindex = bodyindex %}
                                                                {% else %} {# struct.top === metacategory #}
                                                                    {% set senseindex = bodyindex %}
                                                                    {% set catindex = sideindex %}
                                                                {% endif %}

                                                                <div class="accordion-item">
                                                                    <h2 class="accordion-header" id="flush-heading-{{ base_id }}">
                                                                        {# BUTTON collapsed #}
                                                                        <button class="accordion-button collapsed" type="button" 
                                                                                    data-bs-toggle="collapse" 
                                                                                    data-bs-target="#collapse-{{ idpart }}-{{ sideindex }}-{{ bodyindex }}" 
                                                                                    aria-expanded="false" 
                                                                                    aria-controls="collapse-{{ idpart }}-{{ sideindex }}-{{ bodyindex }}">
                                                                            {# ------------ QUESTION - Accordion-button - part to be looped - depends on TOGGLE ------------ #}
                                                                            {{ get_text(bodyitem, data.body) }}
                                                                            {# ------------ End QUESTION - Accordion-button ------------ #}
                                                                        </button>
                                                                    </h2>
                                                                    <div id="collapse-{{ idpart }}-{{ sideindex }}-{{ bodyindex }}" 
                                                                            senseindex="{{ senseindex - 1 }}" catindex="{{ catindex - 1 }}"
                                                                            class="accordion-collapse collapse QuestionCollapse-{{data.top}}" 
                                                                            aria-labelledby="bodyaccordion"
                                                                            data-bs-parent="#{{ idpart }}-{{ sideindex }}">
                                                                        {# ------------ CHECKBOXES - Accordion-body - part to be looped - depends on TOGGLE ------------ #}

                                                                        {# ------------ END CHECKBOXES - Accordion-body ------------ #}
                                                                    </div>
                                                                </div>
                                                            {% endfor %}
                                                        </div>
                                                    </form>
                                                </div>
                                            </div>
                                            
                                        {% endfor %}
                                        {# ------------ End Card - accordion - part to be looped - depends on TOGGLE ------------ #}

                                        {# Card - footer - form's functionality #}
                                        <div class="card-body">
                                            <hr class="bg-gray-400 my-4">
                                            <div class="row">
                                                <div class="col-md-9 ms-auto">
                                                    <button class="btn btn-secondary" type="button">Cancel</button>
                                                    {# button to save question answers #}
                                                    <button class="btn btn-primary" id="savebutton" type="button">Save changes</button>
                                                    {# button to show results #}
                                                    <button class="btn btn-success" id="resultsbutton" type="button">Show Results</button>
                                                </div>
                                            </div>
                                        </div>
                                        {# End Card - footer #}
                                    </div>
                                    {# End Card #}
                                </div>
                            </div>
                        </section>
                        {# End Page content #}
                    </section>
                    {# ------------ END CONTENT DISPLAY multi-collapse inside Body ------------ #}
                {% endfor %}
            </div>
            {% endfor %}   
            {# ------------ End CONTENT Body part ------------ #}

        </div>
    </div>
    {# END BODY #}
</div>


{# Create a list of groups of questions 
        these are the same irrespective of the view #}

{% set questionOptions = [ {"label": "Was True", "id": "was-true", "value": 2},
                          {"label": "True Now", "id": "true-now", "value": 3},
                          {"label": "Not Sure", "id": "not-sure", "value": 1},
                          {"label": "False", "id": "false", "value": 0}] %}
{# create question sets in the form of accordion-body #}
<div class="container" id="questionset-container" style="display:none">
    {% for sense in questions %}
        {% set senseindex = loop.index %}
        {% for metacat in sense.metacategories %}
            {% for cat in metacat.categories -%}   
                {% set base_id = sense.sense + '-' + cat.index %}
                <div class="accordion-body QuestionAccordionBody" id={{base_id}}
                                senseindex="{{senseindex - 1 }}" catindex="{{cat.index - 1 }}">
                    {%- for question in cat.questions -%}
                        {% set questionName = base_id + '-' + loop.index %}
                        <fieldset class="pb-3" id="{{ questionName }}" value=0>
                            <legend class="fs-6">{{ question }}</legend>
                            {# use class=row to spread radio inputs #}
                            <div class="row row-cols-auto justify-content-center">
                                {%- for opt in  questionOptions -%}
                                    <div class="form-check form-check-inline col border border-1 rounded">
                                        <input class="form-check-input ps-2" type="checkbox" 
                                                    name="{{ questionName }}-{{ opt.id }}" 
                                                    question_id="{{ questionName }}"
                                                    id="{{ questionName }}-{{opt.id}}" 
                                                    value="{{ opt.value }}"
                                                    {% if opt.id == "false" %} checked="checked"{% endif %}>
                                        <label class="form-check-label fs-6" for="{{ questionName }}-{{ opt.id }}">
                                            {{ opt.label }}
                                        </label>
                                    </div>
                                {%- endfor -%}
                            </div> <!-- end row of checkboxes-->
                        </fieldset>
                    {%- endfor -%} {# end question loop #}
                </div>
            {%- endfor %} {# end category loop #}
        {% endfor %} {# end metacategory loop #}
    {% endfor %} {# end sense loop #}
</div>


<script>

    // create array script copied from internet
    // usage:
    //      createArray() creates empty 1D array
    //      createArray(2) creates 1D array of length 2
    //      createArray(3, 2) creates 2D array, first dimension length 3, second dimension length 2
    //      createArray(3,3,3,3) creates a 4D array where all dimensions have length 3
    function createArray(length) {
        var arr = new Array(length || 0),
            i = length;

        if (arguments.length > 1) {
            var args = Array.prototype.slice.call(arguments, 1);
            while(i--) arr[length-1 - i] = createArray.apply(this, args);
        }

        return arr;
    }

    // close all open accordion in collapselist
    // actually closes all open collapse elements in the list
    // all elements should be bootstrap collapse elements
    function closeCollapse(collapselist){
        console.log("hiding collapselist");
        for (i=0 ; i<collapselist.length ; i++){
            collapseitem = collapselist[i];
            console.log("collapse item: " + collapseitem.getAttribute("id") + ' ' + 
                            collapseitem.classList.contains('show'));
            if (collapseitem.classList.contains('show')) {
                console.log("hiding item: " + collapseitem.getAttribute("id"));
                // convert DOM object to a bootstrap collapse object
                // default is that the collapse object will toggle show/hide
                // on initialisation. {'toggle': false } prevents this.
                // yes this is the behaviour we want, but best to be explicit.
                // if bootstrap changes this our code will break.
                collapseobj = new bootstrap.Collapse(collapseitem,{ 'toggle': false });
                // call hide to close collapse object and cause events to be released
                collapseobj.hide();
            }
        }
    }

//
// javascript CONSTANTS
//
    // INITIAL STATE
    // it helps keep things together when events trigger
    var theState = {"changeState": true}

    // set up default view: sensesfirst
    var togglestatus = "categoryfirst";
    const sensesTopTabs = document.getElementById("sense-first");
    const metacategoryTopTabs = document.getElementById("metacategory-first");
    const sidebuttons = document.querySelectorAll(".SideCollapse");
    console.log('length of sidebuttons: ' + sidebuttons.length);
    metacategoryTopTabs.style.display = "block";

    // create 2D array of questions and 2D array of progress-item
    const numberOfCategories = 21;
    const numberOfSenses = sensesTopTabs.getAttribute("ntopitems");

    // 2D array of questions 
    const questionAccordionList = document.querySelectorAll(".QuestionAccordionBody");
    //console.log(questionAccordionList);
    const questionArray = createArray(+numberOfSenses, +numberOfCategories);

    // 2D array of progress-item
    const progressItemList = document.querySelectorAll(".progress-item");
    const progressArray = createArray(+numberOfSenses, +numberOfCategories);

    // create array of cardsContentsList
    const cardsContentsList = document.querySelectorAll(".card-contents");
    // create array of cardsContentsList
    const bodyContentsList = document.querySelectorAll(".BodyCollapse");
    // create array of sidebarCollapseList
    const sidebarCollapseList = document.querySelectorAll(".SidebarCollapse");

    if (questionAccordionList.length != +sensesTopTabs.getAttribute("ntopitems") * +numberOfCategories)
        console.log("ERROR number of questions sets does not equal number of senses * number of categories");

//fill progressArray
    for (i=0 ; i<questionAccordionList.length; i++){
        progressItem = progressItemList[i];
        senseindex = progressItem.getAttribute("senseindex");
        catindex = progressItem.getAttribute("catindex");
        //console.log('coords for progress item' + i + ' are [' + senseindex + ',' + catindex + ']');
        progressArray[senseindex][catindex] = progressItem;
    }

    // function to highlight one column of the progressArray
     function setColumnBorderColour(colindex,colour,width) {
        //console.log(progressArray[0][0].parentNode);
        progressArray[0][colindex].parentNode.style.border = width + "px solid " + colour;
    }
    //setColumnBorderColour(0,"black",2);

    // add event listener to sidebuttons
    var theCategory = {}
    for (i=0 ; i<sidebuttons.length ; i++){
        sidebuttons[i].addEventListener('show.bs.collapse',function() {
            console.log("in event listener for side collapse show ");
            if (this.getAttribute("sidetype") === 'metacategory')
                setColumnBorderColour(+this.getAttribute("sideindex") - 1, "black",2);
        });
        sidebuttons[i].addEventListener('hide.bs.collapse',function() {
            console.log("in event listener for side collapse hide ");
            if (this.getAttribute("sidetype") === 'metacategory')
                setColumnBorderColour(+this.getAttribute("sideindex") - 1, "LightGray",2);
        });
    }

    // fill questionArray
    for (i=0 ; i<questionAccordionList.length; i++){
        question = questionAccordionList[i];
        senseindex = question.getAttribute("senseindex");
        catindex = question.getAttribute("catindex");
        //console.log('coords for question set ' + i + ' are [' + senseindex + ',' + catindex + ']');
        questionArray[senseindex][catindex] = question;
    }
    

    // attach questions
    // more CONSTANTS
    const sensesQuestionCollapseList = document.querySelectorAll(".QuestionCollapse-sense");
    const metacategoryQuestionCollapseList = document.querySelectorAll(".QuestionCollapse-metacategory");
    const toggleThisPartList = document.querySelectorAll(".toggleThisPart");
    const metacategoriesFirstList = document.querySelectorAll(".metacategory-first");
    const sensesFirstList = document.querySelectorAll(".sense-first");
    
    function attachQuestions(questionCollapseList){
        for (i=0 ; i<questionCollapseList.length ; i++){
            accordionCollapse = questionCollapseList[i];
            senseindex = accordionCollapse.getAttribute("senseindex");
            catindex = accordionCollapse.getAttribute("catindex");
            
            accordionCollapse.appendChild(questionArray[senseindex][catindex]);
            //console.log(accordionCollapse);

            // attach event listener to question the $ notation is jQuery
            accordionCollapse.addEventListener('hide.bs.collapse',function(){
                console.log("collapse hidden function " + this.id);
                senseindex = this.getAttribute("senseindex");
                catindex = this.getAttribute("catindex");

                progressItem = progressArray[senseindex][catindex];
                progressItem.style.background = "WhiteSmoke"; //LightGrey good alternative

                // see if any questions have WasTrue and/or True checked
                // if so, change background of progressItem to appropriate colour
                questionset = this.getElementsByTagName("fieldset");
                for (j=0 ; j<questionset.length ; j++) { 
                    //console.log('value: ' + questionset[j].getAttribute("value"))                  
                    if (+questionset[j].getAttribute("value") > 1){
                        //console.log('setting colour');
                        switch(senseindex) {
                            case '0': progressItem.style.background = "Red";
                                    break;
                            case '1': progressItem.style.background = "Orange";
                                    break;
                            case '2': progressItem.style.background = "Yellow";
                                    break;
                            case '3': progressItem.style.background = "Green";
                                    break;
                            case '4': progressItem.style.background = "Blue";
                                    break;
                            case '5': progressItem.style.background = "Indigo";
                                    break;
                            case '6': progressItem.style.background = "Violet";
                                    break;
                            
                        }
                        break;
                    }
                }

            });
        }
    }

    // This only runs once when the page loads
    if (togglestatus === "categoryfirst") {
        for(let i = 0; i < metacategoriesFirstList.length; i++){
            metacategoriesFirstList[i].style.display = "block";
        }
        attachQuestions(metacategoryQuestionCollapseList);
    }

// Get toggle button and assign a function
    const togglebutton = document.getElementById("togglebutton");
    togglebutton.addEventListener('click', function() {
        //closeCollapse(sidebuttons);
        if (togglestatus === "categoryfirst") {
            togglestatus = "sensesfirst";
            //closeCollapse(metacategoryQuestionCollapseList);
            togglebutton.innerHTML = "View Category First";
            //metacategoryTopTabs.style.display = "none";
            for (i=0 ; i<toggleThisPartList.length ; i++) {
                if (toggleThisPartList[i].style.display == "block") {
                    toggleThisPartList[i].style.display = "none";
                }
                else {
                    toggleThisPartList[i].style.display = "block";
                }
            };
            console.log('attaching questions: senses')
            attachQuestions(sensesQuestionCollapseList);
        }
        else {
            togglestatus = "categoryfirst";
            //closeCollapse(sensesQuestionCollapseList);
            togglebutton.innerHTML = "View Senses First";
            //sensesTopTabs.style.display = "none";
            //metacategoryTopTabs.style.display = "block";
            for (i=0 ; i<toggleThisPartList.length ; i++) {
                if (toggleThisPartList[i].style.display == "block") {
                    toggleThisPartList[i].style.display = "none";
                }
                else {
                    toggleThisPartList[i].style.display = "block";
                }
            };
            console.log('attaching questions: metacategory')
            attachQuestions(metacategoryQuestionCollapseList);
        }
    });

    // set up progress bar
    // create 2D array of progress items

// Set up behavior of checkboxes for questions
  // grab all the buttons with class 'form-check-input'
  const questionButtons = document.querySelectorAll(".form-check-input")
  console.log('there are ' + questionButtons.length + ' question buttons')

  // loop through buttons setting an event listener
  for (i=0 ; i<questionButtons.length ; i++) {
    questionButtons[i].addEventListener('change', function() {
      //console.log(this.id + ' ' + this.getAttribute("question_id"));
      
      // local CONSTANTS
      const formwrapper = document.getElementById(this.getAttribute("question_id"));
      var currentvalue = formwrapper.getAttribute("value");
      const thisvalue = this.getAttribute("value");
      const buttons = formwrapper.getElementsByTagName("input");
      const falsebutton = buttons[3];
      const notsurebutton = buttons[2]
      const truebutton = buttons[1];
      const wastruebutton = buttons[0];
      //console.log(buttons);
      
      var newvalue;
      if (!this.checked) {
        //console.log(this.checked);
        if (this == falsebutton) { // if false button do nothing else
          falsebutton.checked=true;
        } else {
          //this.removeAttribute('checked');
          newvalue = +currentvalue - +thisvalue; //+thisvalue converts thisvalue to an int
          if (newvalue == 0){ // no buttons are active
            falsebutton.checked=true;
            formwrapper.setAttribute("value",0);
          }
          else { // one other button is active (can't be more than one)
            formwrapper.setAttribute("value",newvalue);
          }
        } 
      }
      else { // the button was not active
        //console.log(this.checked);
        if (this === falsebutton) {
          //console.log("It is false button.");
          formwrapper.setAttribute("value",0);
          for (j=0; j<buttons.length - 1 ; j++)
            buttons[j].checked=false;
        }
        else {
          //console.log("It is NOT false button.");
          falsebutton.checked=false;
          if (this === notsurebutton) {
            //console.log("It is not-sure button.");
            truebutton.checked=false;
            wastruebutton.checked=false;
            formwrapper.setAttribute("value",1);
          }
          else { // button is either wastruebutton or nowtruebutton
            //console.log("First two buttons.");
            if (notsurebutton.checked){
              //console.log("It is not-sure button.");
              notsurebutton.checked=false;
              falsebutton.checked=false;
              currentvalue = 0;
            }
            newvalue = +currentvalue + +thisvalue;
            //console.log('currentvalue: ' + currentvalue + ' thisvalue: ' + thisvalue + ' newvalue: ' + newvalue);
            formwrapper.setAttribute("value",newvalue)
          }
        }
        //this.setAttribute("checked", "checked");
      } 
      //console.log('form value:' + formwrapper.getAttribute("value"));
    }); // end function definition
  } // end loop through buttons


    // create a structure for question answers
    function createJsonAnswers(questionArray) {
        jsonstruct = {"type": "SPCR", "version": 1, "questionStatus": []};

        function Status(senseindex,catindex,values){
            this.senseindex = senseindex;
            this.categoryindex = catindex;
            this.values = values;
        }

        for (i=0 ; i<questionArray.length ; i++){
            for (j=0 ; j<questionArray[i].length ; j++){
                questionAccordion = questionArray[i][j];
                senseindex = questionAccordion.getAttribute("senseindex");
                catindex = questionAccordion.getAttribute("catindex");
                //console.log('coords:'+ senseindex + ' ' + catindex);

                // grab fieldsets
                questions = questionAccordion.getElementsByTagName("fieldset");
                //console.log('number of questions:' + questions.length);

                //create array of question values
                values = [];
                sum = 0;
                for (k=0 ; k<questions.length ; k++){
                    value = questions[k].getAttribute("value");
                    values[k] = +value;
                    sum += +value;
                }
                //console.log("values: " + values);
                if (sum == 0)
                    values = 0;
                //console.log("values: " + values);

                qstatus = new Status(senseindex,catindex,values);
                //console.log(qstatus.senseindex + ' ' + qstatus.categoryindex + ' ' +   qstatus.answers);
                //console.log(JSON.stringify(qstatus));
                jsonstruct.questionStatus.push(qstatus);
            }
        }

        return jsonstruct;
    }
    //console.log(JSON.stringify(createJsonAnswers(questionArray)));

    // get savebutton and add an event listener to save answers
    savebutton = document.getElementById("savebutton");
    savebutton.addEventListener('click', function(){
        console.log("saving answers");
        answers = JSON.stringify(createJsonAnswers(questionArray,null,4));
        console.log(answers);

        // download answers as a json file. The below is convoluted but 
        // there does not seem to be a simpler way.
        const a = document.createElement("a"); // create an empty link
        file = new Blob([answers],{type: "text/plain"});
        console.log(file);
        a.href = URL.createObjectURL(file);
        a.download = "answers.json"; //download to answers.json
        a.click();
        
    });

    function prepare2dArrayById(id){
        // ------ metacategory-first / sense-first ------ main body container
        // all collapsible elements have got a parent
        // grab it first then
        metabuttons = document.getElementById(id);
        // make a list of them
        list = metabuttons.children;
        var result = {};

        // this is just some fancy way to loop over it
        // it just creates an array from iterable object
        // and holds the current oneinside 'item' variable
        Array.prototype.map.call(list, item => {
            // this part selects all rendered card contents
            // we need them in one place to loop over and see if are showing
            cardContents = item.querySelectorAll('.card-contents');
            id = item.getAttribute('id');
            // take main body container's id
            // and use it to create an object
            // where
            // 'containers id' : [ container, it's cards ]
            result[id] = [item, cardContents];
        });

        //console.log(result);
        return result;
    }

    // SIDEBAR NODES, main structure of metacategory-first as an object
    // simplifies the work with buttons, events and cards
    // structure: {'containers id' : [ container, it's cards ]}
    metaTree = prepare2dArrayById('metacategory-first');

// COLLAPSE CATEGORY JAVASCRIPT
    function addEventsToAllCards(tree){
        for(var node in tree){
            collapsible = tree[node][0];
            // SHOW - add event listener to THIS1
            // this one listens if we change between meta
            collapsible.addEventListener('show.bs.collapse', function () {
                thisId = this.getAttribute('id');
                metaBranchClassList = metaTree[thisId][0].classList;
                // console.log('show ' +JSON.stringify(thisId));

                // loop through sidebar nodes (the metaTree object)
                // branch variable is just an index (of metacategory)
                // and metaTree[branch][0] is a node/pointer 
                // to n-th container (only one per metacategory)
                for(branch in metaTree){
                    metaBranchClassList = metaTree[branch][0].classList;
                    isShowing = metaBranchClassList.contains('show');

                    // check if not this, so we can hide other metacategories. 
                    // if any is still showing = isShowing (if not we don't have to hide it). 
                    if(!(thisId == branch) && isShowing){
                        // true, we are changing metacategory
                        // and another one is showing.
                        theState['changeState'] = true;
                        collapseObj = new bootstrap.Collapse(metaTree[branch][0],{ 'toggle': true });
                        
                        // Some fancy way to loop through an object if it is not an array/list but it is an iterable.
                        // metaTree[branch][1] is the node list of cards in curent loop index metacategory
                        Array.prototype.map.call(metaTree[branch][1], card => {
                            cardClassList = card.classList;
                            isCardShowing = cardClassList.contains('show');
                            if(isCardShowing){
                                //cardClassList.toggle('show');
                                collapseobj = new bootstrap.Collapse(card,{ 'toggle': true });
                            }
                        });
                    }
                }
                // if another metacategory has just collapesd we have got a state change.
                // We better 'click' on that category button, we have left behind, so
                // our Progress Grid doesn't focus on it anymore.
                if(theState['changeState'])
                {
                    // we are handling the state change. THX, good boy.
                    theState['changeState'] = false;

                    // WHY this part works properly?
                    // -- comment out this part if checking the other why --
                    card = metaTree[thisId][1][0];
                    sideType = card.getAttribute("sidetype");
                    base = card.getAttribute('baseid');
                    buttonId = 'button-'+base;
                    button = document.getElementById(buttonId);
                    button.click();
                    // -- end comment out this part --

                    // WHY this part doesn't work properly?
                    // -- comment out this part if checking the working why --
                    // card = metaTree[thisId][1][0];
                    // collapseobj = new bootstrap.Collapse(card,{ 'toggle': true });
                    // -- end comment out this part --
                }
            });
            // We do not really need this part at all :)
            collapsible.addEventListener('hide.bs.collapse', function () {
                // theState['changeState'] = true;
                // thisId = this.getAttribute('id');
                // metaBranchClassList = metaTree[thisId][0].classList;
                // console.log('hide ' +JSON.stringify(thisId));
                // lastCatClassList = theCategory['last'].classList;
                // lastIsShowing = lastCatClassList.contains('show');
                // if(lastIsShowing) var collapseObj = new bootstrap.Collapse(theCategory['last'],{ 'toggle': true });
            });
        }
    }

    addEventsToAllCards(metaTree);

  console.log('added event listeners')
</script>


