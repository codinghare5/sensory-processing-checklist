---
layout: layouts/base.njk
title: Results
eleventyNavigation:
  key: Results View
  parent: Views
  order: 6
---

<!-- Context menu ---------------------------------------------------------------------------- -->
{# context menu #}
<section class="container-xl card mb-2">
    <nav class="d-flex justify-content-around py-4">
        {# button to read question answers #}
        {# input type='file' is best for loading a file in #}
        <input class="p-2 bg-info rounded" id="readbutton" id="readfile" type="file" accept="application/json"/>
    </nav>
</section>

<!-- Card with results ---------------------------------------------------------------------------- -->
{# Wrap it inside a container, so it desn't stand out #}
<section class="container-xl card">
    <div class="card-body">
        <h2 class="card-title">Results</h2>

        <canvas id="myChart"></canvas>
    </div>
</section>


{#=============================== END BASIC PAGE LAYOUT =================================================#}

{#=======================================================================================================#}

{#====================================== JAVASCRIPT =======================================================#}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Functions 
    ///////////////////////////////////////////////////////////////////////////////////////

    // Generic Functions
    ////////////////////////////////////////////////////////////////////////////////////////

    // Functions that manipulate html elements in some way
    /////////////////////////////////////////////////////////////////////

    // setQuestionValues(answers) answers is a JSON structure.
    // fills in appropriate values in categoryArray
    // colours in the progress grid appropriately
    function setQuestionValues(answers){
        questionStatus = answers.questionStatus;
        var sensesPoints = [0,0,0,0,0,0,0];
        for (var i=0; i<questionStatus.length; i++){
            item = questionStatus[i];
            //catindex = item.categoryindex;
            sense = +item.senseindex;
            values = item.values;
            for (var k=0 ; k<values.length ; k++){
                val = +values[k];
                sensesPoints[+sense]+= +val;
            }
        }
        You.data = sensesPoints;
        data.datasets.push(You);
        console.log(You);
        console.log(data);
        var myChart = new Chart(
            document.getElementById('myChart'),
            config
        );
    }

    /////////////////////////////////   End Functions  /////////////////////////////////////////////

    // Variables
    ////////////////////////////////////////////////
    var You = {
            label: 'You',
            data: [0, 0, 0, 0, 0, 0, 0],
            fill: true,
            backgroundColor: 'rgba(230, 230, 250, 0.5)',
            borderColor: 'rgb(221,160,221)',
            pointBackgroundColor: 'rgb(255, 99, 132)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(255, 99, 132)'
        };

    var data = {
        labels: [
            'Vision',
            'Hearing',
            'Touch',
            'Sense 4',
            'Sense 5',
            'Sense 6',
            'Sense 7'
        ],
        datasets: [{
            label: 'Max',
            data: [295, 0, 0, 0, 0, 0, 0],
            fill: true,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgb(255, 99, 132)',
            pointBackgroundColor: 'rgb(255, 99, 132)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(255, 99, 132)'
        }, {
            label: 'Average',
            data: [100, 100, 100, 100, 100, 100, 100],
            fill: true,
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgb(54, 162, 235)',
            pointBackgroundColor: 'rgb(54, 162, 235)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(54, 162, 235)'
        }]
    };

    const config = {
        type: 'radar',
        data: data,
        options: {
            elements: {
                line: {
                    borderWidth: 3
                }
            }
        },
    };

    //////////////////////////// END GLOBAL VARIABLES ///////////////////////////////////
    
    // Loading the answers
    // loadButton is an input, so we need 'change' event to fire
    loadButton = document.getElementById('readbutton');
    loadButton.addEventListener('change',async function(event) {
        // input gives us the fileList object
        var fileList = event.target.files;
        file = fileList[0];

        // we need a FileReader instance
        const reader = new FileReader();
        // we have to add event listener to the instance before we continue
        reader.addEventListener('loadend', () => {
            // after event load ends we get and object reader.result
            var answers = reader.result;
            answers = JSON.parse(answers);
            //console.log(answers);

            Answers = answers;
            setQuestionValues(answers);
        });
        // let's read the file, as event listener is prepared
        try {
            reader.readAsText(file);
        }
        catch (err){
            return;
            alert('Cannot read file');
        }
    });
</script>
